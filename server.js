```javascript
// server.js ‚Äî Final (self-contained)
// Node 20.x compatible Express server with Playwright PDF generation.
// - Built-in default events & legal texts (used on first run, then persisted to DATA_DIR)
// - /api/events         GET/POST (admin) -> manage events
// - /api/settings       GET/POST (admin) -> settings including legal texts & backgrounds
// - /api/upload-background POST (admin) -> upload PNG/JPEG as base64 stored in settings
// - /api/backgrounds-status GET -> which backgrounds loaded
// - /api/generate-pdf   POST (public) -> generate certificate/diploma/thanks via Playwright; saves participant record
// - /api/save-participant POST (public) -> alternative to save participant record
// - /api/export-participants GET (admin) -> downloads XLSX with all saved participants
//
// For Render:
// - set ADMIN_USER and ADMIN_PASS env vars (recommended).
// - set DATA_DIR env var or set RENDER=true (then DATA_DIR=/tmp/data).
// - Ensure Playwright is installed and configured before starting the server.
//
// Usage notes:
// - Client should POST JSON { template, data } to /api/generate-pdf
//   where template is one of: 'certificate', 'diploma_1', 'diploma_2', 'diploma_3', 'thanks', or 'auto'.
//   If template==='auto', server will choose diploma/certificate based on data.score.
// - The server will return application/pdf as attachment and also save participant record to participants.json.

const express = require('express');
const path = require('path');
const fs = require('fs-extra');
const bodyParser = require('body-parser');
const multer = require('multer');
const XLSX = require('xlsx');
const { chromium } = require('playwright');

const app = express();
const PORT = process.env.PORT || 10000;

// Admin credentials (set in environment for security)
const ADMIN_USER = process.env.ADMIN_USER || 'nadezhda8871s';
const ADMIN_PASS = process.env.ADMIN_PASS || '1988NAna';

// Data directory: use DATA_DIR env or /tmp/data on Render, else ./data
const DATA_DIR = process.env.DATA_DIR || (process.env.RENDER ? '/tmp/data' : path.join(__dirname, 'data'));
const EVENTS_FILE = path.join(DATA_DIR, 'events.json');
const SETTINGS_FILE = path.join(DATA_DIR, 'settings.json');
const PARTICIPANTS_FILE = path.join(DATA_DIR, 'participants.json');

fs.ensureDirSync(DATA_DIR);

// --- Default content (will be written only if files missing) ---
const DEFAULT_EVENTS = [
  {
    key: 'stat',
    title: '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –û–ª–∏–º–ø–∏–∞–¥–∞ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏ –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ',
    short: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –º–µ—Ç–æ–¥–∞–º.',
    audience: 'students',
    info: `–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –û–ª–∏–º–ø–∏–∞–¥–µ –ø–æ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ ‚Äî ¬´–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥—É—â–µ–≥–æ: –∏—Å–∫—É—Å—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö!¬ª

–°–µ–≥–æ–¥–Ω—è —É–º–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º —Ñ–∞–∫—Ç–æ—Ä–æ–º —É—Å–ø–µ—Ö–∞ –∫–∞–∫ –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏, —Ç–∞–∫ –∏ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –£–º–µ–Ω–∏–µ –≤—ã—è–≤–ª—è—Ç—å –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏, —Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∞—à—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–∞–∑–≤–∏—Ç–∏—è. –ù–∞—à–∞ –æ–ª–∏–º–ø–∏–∞–¥–∞ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞, –ø—Ä–µ–¥–ª–∞–≥–∞—è —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–º–µ–Ω—è—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏ –∑–Ω–∞–Ω–∏—è–º–∏ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω.

–ú—ã —É–±–µ–∂–¥–µ–Ω—ã, —á—Ç–æ –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–≤—ã—Å–∏—Ç —Å–≤–æ—é –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–Ω–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–º –≤ –æ–±–ª–∞—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!

‚úÖ –í—ã –æ—Å–≤–æ–∏—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
‚úÖ –£–∑–Ω–∞–µ—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ä–∏—è.
‚úÖ –ü–æ–ª—É—á–∏—Ç–µ —Ü–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

üèÜ –ù–∞—à —Ñ–æ—Ä–º–∞—Ç ‚Äî –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π:
‚≠ê –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞–Ω—É—Ç –≤–∞–º –∏–∑–≤–µ—Å—Ç–Ω—ã –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏—Å–ø—ã—Ç–∞–Ω–∏–π.
‚≠ê –ü—Ä–∏–∑–æ–≤—ã–µ –º–µ—Å—Ç–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω—ã: –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –≤—ã–¥–∞–µ—Ç—Å—è –¥–∏–ø–ª–æ–º –∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.`,
    questions: [
      { q: '–ü–æ —Ñ–æ—Ä–º—É–ª–µ (‚àëp1q1)/(‚àëp0q1) —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç –æ–±—â–∏–π –∏–Ω–¥–µ–∫—Å —Ü–µ–Ω', options: ['–≠–¥–∂–≤–æ—Ä—Ç–∞-–ú–∞—Ä—à–∞–ª–ª–∞', '–§–∏—à–µ—Ä–∞', '–õ–∞—Å–ø–µ–π—Ä–µ—Å–∞', '–ü–∞–∞—à–µ'], correct: 3 },
      { q: '–ò–Ω–¥–µ–∫—Å, –æ—Ç—Ä–∞–∂–∞—é—â–∏–π –≤–ª–∏—è–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å—Ç–∞–≤–æ–∫ –ø–æ –∫–∞–∂–¥–æ–º—É –∫—Ä–µ–¥–∏—Ç—É –Ω–∞ —Å—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ ‚Äî —ç—Ç–æ –∏–Ω–¥–µ–∫—Å‚Ä¶', options: ['–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞', '–°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Å–¥–≤–∏–≥–æ–≤', '–ü–µ—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞', '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π'], correct: 0 },
      { q: '–í –æ–±—â–µ–º –∏–Ω–¥–µ–∫—Å–µ —Ü–µ–Ω –ü–∞–∞—à–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–µ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è‚Ä¶', options: ['—Ç–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç –æ—Ç—á–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞', '–∏–Ω–¥–µ–∫—Å –§–∏—à–µ—Ä–∞', '—Ç–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç –±–∞–∑–∏—Å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞', '–∏–Ω–¥–µ–∫—Å –≠–¥–∂–≤–æ—Ä—Ç–∞-–ú–∞—Ä—à–∞–ª–ª–∞'], correct: 0 },
      { q: '–ò–Ω–¥–µ–∫—Å, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—â–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã –∑–∞ —Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã –∫–∞–∂–¥–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ ‚Äî —ç—Ç–æ –∏–Ω–¥–µ–∫—Å‚Ä¶', options: ['–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞', '–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞', '–ü–µ—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞', '–°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Å–¥–≤–∏–≥–æ–≤'], correct: 0 },
      { q: '–í—ã–±–æ—Ä–∫–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –º–∞–ª–æ–π, –µ—Å–ª–∏ –µ–µ –æ–±—ä–µ–º –º–µ–Ω–µ–µ‚Ä¶', options: ['30', '40', '50', '100'], correct: 0 }
    ]
  },
  {
    key: 'fin',
    title: '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –û–ª–∏–º–ø–∏–∞–¥–∞ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º –≤ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å–µ–∫—Ç–æ—Ä–µ',
    short: '–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –∏ —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á—ë—Ç–æ–≤ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤.',
    audience: 'students',
    info: `–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –Ω–∞—à–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –æ–ª–∏–º–ø–∏–∞–¥–µ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é ‚Äî ¬´–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ: —Ç–æ—á–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π!¬ª

–°–µ–≥–æ–¥–Ω—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –≤–∞–∂–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º —É—Å–ø–µ—Ö–∞ –∫–∞–∫ –≤ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏, —Ç–∞–∫ –∏ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä–µ. –û—Ç —É–º–µ–Ω–∏—è –≥—Ä–∞–º–æ—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã, –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –±—é–¥–∂–µ—Ç –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∑–∞–≤–∏—Å–∏—Ç –≤–∞—à–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç. –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å–º–æ–∂–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å —Å–≤–æ–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –∏ —Å—Ç–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–º –º–∞—Å—Ç–µ—Ä–æ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –¥–µ–ª–∞!`,
    questions: [
      { q: '–§–∞–∫—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é', options: ['–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏', '–¥–∏—Å–∫–æ–Ω—Ç–∞', '—Ä–µ–Ω—Ç—ã', '–∫–æ–Ω–≤–µ—Ä—Å–∏–∏'], correct: 0 },
      { q: '–ü—Ä–æ—Ü–µ—Å—Å –Ω–∞—Ä–∞—â–µ–Ω–∏—è ‚Äî —ç—Ç–æ‚Ä¶', options: ['–ø–æ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—É–º–º–µ –Ω–∞–π—Ç–∏ –æ–∂–∏–¥–∞–µ–º—É—é', '–ø–æ –±—É–¥—É—â–µ–π —Å—É–º–º–µ –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω—ã–π –¥–æ–ª–≥', '–Ω–æ—Ä–º–∞ –¥–∏—Å–∫–æ–Ω—Ç–∞', '—Ä–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏'], correct: 0 },
      { q: '–ü—Ä–æ—Ü–µ—Å—Å –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî —ç—Ç–æ‚Ä¶', options: ['–ø–æ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—É–º–º–µ –Ω–∞–π—Ç–∏ –æ–∂–∏–¥–∞–µ–º—É—é', '–ø–æ –±—É–¥—É—â–µ–π —Å—É–º–º–µ –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω—ã–π –¥–æ–ª–≥', '—Ä–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏', '–Ω–µ—Ç –≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞'], correct: 1 },
      { q: '–ß–µ–º –≤—ã—à–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è —Å—Ä–µ–¥–∏ –∑–∞–µ–º—â–∏–∫–æ–≤‚Ä¶', options: ['–≤—ã—à–µ —Å—Ç–∞–≤–∫–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º', '–Ω–∏–∂–µ —Å—Ç–∞–≤–∫–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º', '—Ö—É–∂–µ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞–º', '–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'], correct: 0 },
      { q: '–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ ‚Äî —ç—Ç–æ‚Ä¶', options: ['–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ –¥–æ—Ö–æ–¥–∞', '–∞–±—Å–æ–ª—é—Ç–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ –¥–æ—Ö–æ–¥–∞', '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∫ —Å—É–º–º–µ', '–≤—Å–µ –æ—Ç–≤–µ—Ç—ã –≤–µ—Ä–Ω—ã'], correct: 2 }
    ]
  },
  {
    key: 'prob',
    title: '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –û–ª–∏–º–ø–∏–∞–¥–∞ ¬´–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¢–µ–æ—Ä–∏–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ¬ª',
    short: '–°—Ç–æ—Ö–∞—Å—Ç–∏–∫–∞, —Ä–∏—Å–∫–∏ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ.',
    audience: 'students',
    info: `–£–≤–∞–∂–∞–µ–º—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –∏ –º–æ–ª–æ–¥—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≤ —Å—Ñ–µ—Ä–µ —ç–∫–æ–Ω–æ–º–∏–∫–∏!

–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—à–µ–º—É –≤–Ω–∏–º–∞–Ω–∏—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—è–≤–∏—Ç—å —Å–µ–±—è –≤ –º–∏—Ä–µ —Å–ª–æ–∂–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—É—á–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π. –í–ø–µ—Ä–≤—ã–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –û–ª–∏–º–ø–∏–∞–¥–∞ –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ ¬´–¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ¬ª.

–¶–µ–ª—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞—à–∏—Ö —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Å—Ç–æ—Ö–∞—Å—Ç–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ä–µ–¥–µ. –í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—ë —É–º–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–∫–∏, –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ä–∏—Å–∫–∏ –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è.

üèÖ –ù–∞—à —Ñ–æ—Ä–º–∞—Ç ‚Äî —É–¥–æ–±–Ω—ã–π –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π:
‚ú® –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–≤–µ—Å—Ç–Ω—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ.
‚ú® –ù–∞–≥—Ä–∞–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Å—Ä–∞–∑—É: –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –¥–∏–ø–ª–æ–º –∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.`,
    questions: [
      { q: '–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ?', options: ['–ù—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∏—Å–∫–∞', '–ï–¥–∏–Ω–∏—á–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ä–∏—Å–∫–∞', '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ì–∞—É—Å—Å–∞', '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å'], correct: 2 },
      { q: '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ ‚Äî —ç—Ç–æ‚Ä¶', options: ['–£—Å–ª–æ–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', '–ü–æ–ª–∏–º–æ–¥–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞', '–î–≤—É–º–µ—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è', '–ü–µ—Ä–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è'], correct: 3 },
      { q: '–°–ª—É—á–∞–π–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ ‚Äî —ç—Ç–æ‚Ä¶', options: ['–ö—Ä–∏—Ç–µ—Ä–∏–π –§–∏—à–µ—Ä–∞', '–¢–µ–æ—Ä–µ–º–∞ –ü—É–∞—Å—Å–æ–Ω–∞', '–í–µ–ª–∏—á–∏–Ω–∞, –ø–æ–ª—É—á–µ–Ω–Ω–∞—è —Å–ª—É—á–∞–π–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º', '–§–æ—Ä–º—É–ª–∞ –ë–µ—Ä–Ω—É–ª–ª–∏'], correct: 2 },
      { q: '–î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ ‚Äî —ç—Ç–æ‚Ä¶', options: ['–ó–∞–¥–∞–Ω–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é', '–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ', '–ü—Ä–∏–Ω–∏–º–∞—é—â–∞—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞'], correct: 2 },
      { q: '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ r = 0 –æ–∑–Ω–∞—á–∞–µ—Ç‚Ä¶', options: ['–ù–µ—Ç –ª–∏–Ω–µ–π–Ω–æ–π —Å–≤—è–∑–∏', '–ü–æ–ª–Ω–∞—è –ª–∏–Ω–µ–π–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å', '–û–¥–∏–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ–∑–∞–≤–∏—Å–∏–º', '–í—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã'], correct: 0 }
    ]
  }
];

const DEFAULT_SETTINGS = {
  paymentText: `–ó–∞ —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –ø–ª–∞—Ç–∞ –Ω–µ –≤–∑–∏–º–∞–µ—Ç—Å—è. –î–æ–∫—É–º–µ–Ω—Ç (–¥–∏–ø–ª–æ–º/—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç) —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º ‚Äî 100 —Ä—É–±.`,
  footerEmail: 'naych_kooper@mail.ru',
  footerText: '¬© 2025 –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞ —Å—Ç—Ä–æ–≥–æ –ó–ê–ü–†–ï–©–ï–ù–û!',
  backgrounds: { // stored as data URLs (image/png;base64,...)
    all: null,
    diploma_1: null,
    diploma_2: null,
    diploma_3: null,
    certificate: null,
    thanks: null
  },
  legal: {
    termsTitle: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ (–ø—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞) –∏ –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ª–∏–º–ø–∏–∞–¥—ã',
    termsText: `1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ (–ø—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞)

1. –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è
1.1. –ù–∞—Å—Ç–æ—è—â–µ–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ (–¥–∞–ª–µ–µ ‚Äì ¬´–°–æ–≥–ª–∞—à–µ–Ω–∏–µ¬ª) —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º –æ–Ω–ª–∞–π–Ω-–æ–ª–∏–º–ø–∏–∞–¥ –∏ –∫–æ–Ω–∫—É—Ä—Å–æ–≤ (–¥–∞–ª–µ–µ ‚Äì ¬´–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä¬ª) –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –ª–∏—Ü–æ–º (–¥–∞–ª–µ–µ ‚Äì ¬´–£—á–∞—Å—Ç–Ω–∏–∫¬ª), –æ—Å—Ç–∞–≤–ª—è—é—â–∏–º —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –Ω–∞ —Å–∞–π—Ç–µ.
1.2. –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –æ–∑–Ω–∞—á–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ –£—á–∞—Å—Ç–Ω–∏–∫–∞ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –°–æ–≥–ª–∞—à–µ–Ω–∏—è.

2. –ü—Ä–µ–¥–º–µ—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
2.1. –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –£—á–∞—Å—Ç–Ω–∏–∫—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –≤ –æ–Ω–ª–∞–π–Ω-–æ–ª–∏–º–ø–∏–∞–¥–∞—Ö –∏ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö –±–µ—Å–ø–ª–∞—Ç–Ω–æ.
2.2. –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–∏–ø–ª–æ–º –∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∑–∞ –ø–ª–∞—Ç—É ‚Äî 100 —Ä—É–±–ª–µ–π –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç.

3. –ü—Ä–∞–≤–∞ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Å—Ç–æ—Ä–æ–Ω
–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –æ–±—è–∑—É–µ—Ç—Å—è: –ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É; –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã; –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∏–ø–ª–æ–º –∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.
–£—á–∞—Å—Ç–Ω–∏–∫ –æ–±—è–∑—É–µ—Ç—Å—è: –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏; –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –¥–∏–ø–ª–æ–º –∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø—Ä–∏ –µ–≥–æ –∑–∞–∫–∞–∑–µ.

4. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Å—Ç–æ—Ä–æ–Ω
–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –æ—à–∏–±–∫–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö, –≤–æ–∑–Ω–∏–∫—à–∏–µ –ø–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ–ø–ª–∞—Ç—ã.

5. –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è
5.1. –°–æ–≥–ª–∞—à–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç–æ–π.
5.2. –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –≤–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ø—É–±–ª–∏–∫—É—è –∏—Ö –Ω–∞ —Å–∞–π—Ç–µ.`,
    privacyTitle: '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
    privacyText: `1. –ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –º—ã —Å–æ–±–∏—Ä–∞–µ–º
–§–ò–û, e-mail, —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –∫–ª–∞—Å—Å/–≤–æ–∑—Ä–∞—Å—Ç –∏ –∏–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–µ –∑–∞—è–≤–∫–∏.

2. –¶–µ–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
‚Äî –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è –≤ –æ–ª–∏–º–ø–∏–∞–¥–µ;
‚Äî –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤;
‚Äî —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∏–ø–ª–æ–º–æ–≤/—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã;
‚Äî –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö.

3. –ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
–î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞—â–∏—â—ë–Ω–Ω–æ–π –±–∞–∑–µ; –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º, –∫—Ä–æ–º–µ —Å–ª—É—á–∞–µ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –∑–∞–∫–æ–Ω–∞.

4. –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
¬´–Ø, ______________________, –∑–∞–ø–æ–ª–Ω—è—è —Ñ–æ—Ä–º—É —É—á–∞—Å—Ç–∏—è –Ω–∞ —Å–∞–π—Ç–µ, –≤—ã—Ä–∞–∂–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–§–ò–û, e-mail, —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –∏ –¥—Ä—É–≥–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è).
–°–æ–≥–ª–∞—Å–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –µ–≥–æ –ø–∏—Å—å–º–µ–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞.¬ª`
  }
};

// Write defaults if missing
if (!fs.existsSync(EVENTS_FILE)) {
  fs.writeJsonSync(EVENTS_FILE, DEFAULT_EVENTS, { spaces: 2 });
}
if (!fs.existsSync(SETTINGS_FILE)) {
  fs.writeJsonSync(SETTINGS_FILE, DEFAULT_SETTINGS, { spaces: 2 });
}
if (!fs.existsSync(PARTICIPANTS_FILE)) {
  fs.writeJsonSync(PARTICIPANTS_FILE, [], { spaces: 2 });
}

// Multer memory storage for uploads
const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

// Middleware
app.use(express.static('public'));
app.use(bodyParser.json({ limit: '30mb' }));
app.use(bodyParser.urlencoded({ extended: true, limit: '30mb' }));

// --- Auth helpers ---
function isValidAuthToken(b64token) {
  if (!b64token) return false;
  try {
    const decoded = Buffer.from(b64token, 'base64').toString();
    const [user, pass] = decoded.split(':');
    return user === ADMIN_USER && pass === ADMIN_PASS;
  } catch (e) {
    return false;
  }
}
function checkAuthFromRequest(req) {
  const header = req.headers.authorization;
  if (header && header.startsWith('Basic ')) {
    const token = header.split(' ')[1];
    return isValidAuthToken(token);
  }
  if (req.query && req.query.auth) {
    return isValidAuthToken(req.query.auth);
  }
  return false;
}
function requireAuth(req, res, next) {
  if (checkAuthFromRequest(req)) return next();
  res.status(401).json({ error: 'Unauthorized' });
}

// --- API: EVENTS ---
app.get('/api/events', (req, res) => {
  try {
    const ev = fs.readJsonSync(EVENTS_FILE);
    res.json(ev);
  } catch (e) {
    console.error('Read events error:', e);
    res.status(500).json({ error: 'Failed to read events' });
  }
});

app.post('/api/events', requireAuth, (req, res) => {
  try {
    const events = req.body;
    if (!Array.isArray(events)) return res.status(400).json({ error: 'Invalid payload' });
    fs.writeJsonSync(EVENTS_FILE, events, { spaces: 2 });
    res.json({ ok: true });
  } catch (e) {
    console.error('Save events error:', e);
    res.status(500).json({ error: 'Failed to save events' });
  }
});

// --- API: SETTINGS / LEGAL ---
app.get('/api/settings', (req, res) => {
  try {
    const s = fs.readJsonSync(SETTINGS_FILE);
    res.json(s);
  } catch (e) {
    console.error('Read settings error:', e);
    res.status(500).json({ error: 'Failed to read settings' });
  }
});

app.post('/api/settings', requireAuth, (req, res) => {
  try {
    const incoming = req.body || {};
    const settings = fs.readJsonSync(SETTINGS_FILE);
    const merged = Object.assign({}, settings, incoming);
    if (incoming.backgrounds) {
      merged.backgrounds = Object.assign({}, settings.backgrounds, incoming.backgrounds);
    }
    if (incoming.legal) {
      merged.legal = Object.assign({}, settings.legal, incoming.legal);
    }
    fs.writeJsonSync(SETTINGS_FILE, merged, { spaces: 2 });
    res.json({ ok: true });
  } catch (e) {
    console.error('Save settings error:', e);
    res.status(500).json({ error: 'Failed to save settings' });
  }
});

// --- Upload background (admin) ---
app.post('/api/upload-background', requireAuth, upload.single('background'), (req, res) => {
  try {
    if (!req.file) return res.status(400).json({ error: 'No file uploaded' });
    const docType = req.body.docType; // all, diploma_1, diploma_2, diploma_3, certificate, thanks
    const valid = ['all', 'diploma_1', 'diploma_2', 'diploma_3', 'certificate', 'thanks'];
    if (!valid.includes(docType)) return res.status(400).json({ error: 'Invalid docType' });

    const dataUrl = `${req.file.mimetype};base64,${req.file.buffer.toString('base64')}`;
    const settings = fs.readJsonSync(SETTINGS_FILE);
    settings.backgrounds = settings.backgrounds || {};
    settings.backgrounds[docType] = dataUrl;
    fs.writeJsonSync(SETTINGS_FILE, settings, { spaces: 2 });
    res.json({ ok: true, message: `Background ${docType} saved.` });
  } catch (e) {
    console.error('Upload bg error:', e);
    res.status(500).json({ error: 'Upload failed' });
  }
});

app.get('/api/backgrounds-status', (req, res) => {
  try {
    const settings = fs.readJsonSync(SETTINGS_FILE);
    const b = settings.backgrounds || {};
    res.json({
      backgrounds: {
        all: !!b.all,
        diploma_1: !!b.diploma_1,
        diploma_2: !!b.diploma_2,
        diploma_3: !!b.diploma_3,
        certificate: !!b.certificate,
        thanks: !!b.thanks
      }
    });
  } catch (e) {
    console.error('bg status error:', e);
    res.status(500).json({ error: 'Failed to read backgrounds' });
  }
});

// --- API: Save participant (public) ---
app.post('/api/save-participant', (req, res) => {
  try {
    const payload = req.body || {};
    if (!payload.fio) return res.status(400).json({ error: 'Missing fio' });

    const db = fs.readJsonSync(PARTICIPANTS_FILE);
    const record = Object.assign({
      id: Date.now().toString(),
      timestamp: new Date().toISOString()
    }, payload);
    db.push(record);
    fs.writeJsonSync(PARTICIPANTS_FILE, db, { spaces: 2 });
    res.json({ ok: true, id: record.id });
  } catch (e) {
    console.error('Save participant error:', e);
    res.status(500).json({ error: 'Failed to save participant' });
  }
});

// --- API: Export participants (admin) ---
app.get('/api/export-participants', (req, res) => {
  if (!checkAuthFromRequest(req)) return res.status(401).send('Unauthorized');
  try {
    const data = fs.readJsonSync(PARTICIPANTS_FILE);
    const wb = XLSX.utils.book_new();
    // normalize: ensure keys are primitive
    const ws = XLSX.utils.json_to_sheet(data);
    XLSX.utils.book_append_sheet(wb, ws, 'participants');
    const buf = XLSX.write(wb, { bookType: 'xlsx', type: 'buffer' });
    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader('Content-Disposition', 'attachment; filename="participants.xlsx"');
    res.send(buf);
  } catch (e) {
    console.error('Export error:', e);
    res.status(500).send('Export failed');
  }
});

// --- API: Generate PDF via Playwright (public) ---
// Expected body:
// { template: 'certificate'|'diploma_1'|'diploma_2'|'diploma_3'|'thanks'|'auto', data: {fio, email, school, region, city, supervisor, title, score, date, number} }
app.post('/api/generate-pdf', async (req, res) => {
  const { template, data } = req.body || {};
  if (!data || !data.fio) return res.status(400).json({ error: 'Missing participant data' });

  try {
    // Load settings and choose template if 'auto'
    const settings = fs.readJsonSync(SETTINGS_FILE);
    let chosenTemplate = template || 'auto';
    if (chosenTemplate === 'auto') {
      const score = Number(data.score || 0);
      if (score > 70) chosenTemplate = 'diploma_1';
      else if (score > 50) chosenTemplate = 'diploma_2';
      else if (score > 20) chosenTemplate = 'diploma_3';
      else chosenTemplate = 'certificate';
    }

    const background = (settings.backgrounds && (settings.backgrounds[chosenTemplate] || settings.backgrounds.all)) || null;
    const today = data.date || new Date().toLocaleDateString('ru-RU');
    const number = data.number || (`2025-${String(Math.floor(Math.random()*100000)).padStart(5,'0')}`);

    // Build HTML content (similar to client version but server-side)
    const schoolWithBreak = (data.school || '').replace(/(—É–Ω–∏–≤–µ—Ä—Å–∏)(—Ç–µ—Ç)/gi, '$1-<br>$2');

    let titleBlock = '';
    if (chosenTemplate === 'diploma_1') titleBlock = '<div style="font-size:28px;font-weight:bold;text-align:center;margin:20px 0;">–î–ò–ü–õ–û–ú I –°–¢–ï–ü–ï–ù–ò</div>';
    else if (chosenTemplate === 'diploma_2') titleBlock = '<div style="font-size:26px;font-weight:bold;text-align:center;margin:20px 0;">–î–ò–ü–õ–û–ú II –°–¢–ï–ü–ï–ù–ò</div>';
    else if (chosenTemplate === 'diploma_3') titleBlock = '<div style="font-size:24px;font-weight:bold;text-align:center;margin:20px 0;">–î–ò–ü–õ–û–ú III –°–¢–ï–ü–ï–ù–ò</div>';
    else if (chosenTemplate === 'thanks') titleBlock = '<div style="font-size:24px;font-weight:bold;text-align:center;margin:20px 0;">–ë–õ–ê–ì–û–î–ê–†–ù–û–°–¢–¨</div>';
    else titleBlock = '<div style="font-size:24px;font-weight:bold;text-align:center;margin:20px 0;">–°–ï–†–¢–ò–§–ò–ö–ê–¢ –£–ß–ê–°–¢–ù–ò–ö–ê</div>';

    let contentInner = '';
    if (chosenTemplate === 'thanks') {
      contentInner = `
        <div style="text-align:center; margin-bottom:20px; font-size:18px; font-weight:bold;">${escapeHtml(data.title || '')}</div>
        <div style="font-size:20px; font-weight:bold; text-align:center; margin:20px 0;">–ë–õ–ê–ì–û–î–ê–†–ù–û–°–¢–¨ –ù–ê–£–ß–ù–û–ú–£ –†–£–ö–û–í–û–î–ò–¢–ï–õ–Æ</div>
        <div style="font-size:20px; font-weight:bold; text-align:center; margin:10px 0;">${escapeHtml(data.supervisor || '')}</div>
        <div style="text-align:center; margin:20px 0; line-height:1.5;">–¶–µ–Ω—Ç—Ä –Ω–∞—É–∫–∏ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π –≤—ã—Ä–∞–∂–∞–µ—Ç –í–∞–º –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–∞ <b>(${escapeHtml(data.fio || '')})</b>.</div>
        <div style="margin-top:40px; text-align:center; font-size:14px;">–î–∞—Ç–∞: ${escapeHtml(today)}<br>‚Ññ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${escapeHtml(number)}</div>
      `;
    } else {
      contentInner = `
        <div style="text-align:center; margin-bottom:20px; font-size:18px; font-weight:bold;">${escapeHtml(data.title || '')}</div>
        ${titleBlock}
        ${chosenTemplate.startsWith('diploma') ? '<div style="text-align:center; margin:10px 0;">–Ω–∞–≥—Ä–∞–∂–¥—ë–Ω(–∞):</div>' : ''}
        <div style="font-size:20px; font-weight:bold; text-align:center; margin:10px 0;">${escapeHtml(data.fio || '')}</div>
        <div style="text-align:center;">${schoolWithBreak ? schoolWithBreak : ''}${(schoolWithBreak ? ', ' : '')}${escapeHtml(data.region || '')}, ${escapeHtml(data.city || '')}</div>
        ${data.supervisor ? `<div style="margin-top:20px; text-align:center;">–ù–∞—É—á–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å(–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å):<br>${escapeHtml(data.supervisor)}</div>` : ''}
        <div style="margin-top:40px; text-align:center; font-size:14px;">–î–∞—Ç–∞: ${escapeHtml(today)}<br>‚Ññ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${escapeHtml(number)}</div>
      `;
    }

    const fullHtml = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8" />
        <style>
          @page { size: A4 landscape; margin: 0; }
          html,body{margin:0;padding:0;height:100%;}
          body{font-family:"Times New Roman", serif;}
          .page{width:297mm;height:210mm;position:relative;overflow:hidden;}
          .bg{position:absolute;inset:0;width:100%;height:100%;object-fit:cover;z-index:0;opacity:1;}
          .content{position:relative;z-index:1;padding:40px 60px;box-sizing:border-box;height:100%;color:#000;}
        </style>
      </head>
      <body>
        <div class="page">
          ${background ? `<img src="${background}" class="bg" alt="bg" />` : ''}
          <div class="content">
            ${contentInner}
          </div>
        </div>
      </body>
      </html>
    `;

    // Launch Playwright and generate PDF
    const browser = await chromium.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
    });
    const pagePlay = await browser.newPage();
    await pagePlay.setContent(fullHtml, { waitUntil: 'networkidle' });
    const pdfBuffer = await pagePlay.pdf({ format: 'A4', printBackground: true, landscape: true });
    await browser.close();

    // Save participant record (including email) to participants.json
    try {
      const db = fs.readJsonSync(PARTICIPANTS_FILE);
      const record = {
        id: Date.now().toString(),
        timestamp: new Date().toISOString(),
        template: chosenTemplate,
        fio: data.fio || '',
        email: data.email || '',
        school: data.school || '',
        region: data.region || '',
        city: data.city || '',
        supervisor: data.supervisor || '',
        score: data.score ?? null,
        date: today,
        number,
        eventKey: data.eventKey || null,
        eventTitle: data.title || null
      };
      db.push(record);
      fs.writeJsonSync(PARTICIPANTS_FILE, db, { spaces: 2 });
    } catch (e) {
      console.warn('Could not save participant record:', e);
    }

    // Return PDF as attachment
    const filename = `${chosenTemplate}-${number}.pdf`;
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.send(pdfBuffer);

  } catch (e) {
    console.error('generate-pdf error:', e);
    res.status(500).json({ error: 'PDF generation failed', message: e.message });
  }
});

// Helper: escapeHtml
function escapeHtml(str) {
  if (str === undefined || str === null) return '';
  return String(str)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
}

// Serve static files (public folder)
app.get('/admin', (req, res) => res.sendFile(path.join(__dirname, 'public', 'admin.html')));
app.get('/docs', (req, res) => res.sendFile(path.join(__dirname, 'public', 'docs.html')));
app.get('*', (req, res) => res.sendFile(path.join(__dirname, 'public', 'index.html')));

// Start server
app.listen(PORT, () => {
  console.log(`‚úÖ Server started on port ${PORT}`);
  console.log(`Data directory: ${DATA_DIR}`);
});
```
