import logging
from decimal import Decimal
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.views.decorators.http import require_http_methods
from django.http import HttpResponse, JsonResponse
from django.urls import reverse
from django.conf import settings
from .models import Event, Registration
from .forms import RegistrationForm
from .services.yookassa import YooKassaService

logger = logging.getLogger(__name__)


def event_list(request):
    """Display list of all events"""
    try:
        events = Event.objects.filter(is_active=True).order_by('-start_date')
        context = {'events': events, 'title': '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'}
        return render(request, 'events/list.html', context)
    except Exception as e:
        logger.error(f'Error loading event list: {str(e)}')
        messages.error(request, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π')
        return render(request, 'events/list.html', {'events': []})


def event_detail(request, pk):
    """Display event details"""
    try:
        event = get_object_or_404(Event, pk=pk, is_active=True)
        context = {'event': event, 'title': event.title}
        return render(request, 'events/detail.html', context)
    except Event.DoesNotExist:
        messages.error(request, '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        return redirect('events:list')
    except Exception as e:
        logger.error(f'Error loading event {pk}: {str(e)}')
        messages.error(request, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
        return redirect('events:list')


@require_http_methods(['GET', 'POST'])
def event_register(request, pk):
    """Register for event"""
    try:
        event = get_object_or_404(Event, pk=pk, is_active=True)
        
        if request.method == 'POST':
            form = RegistrationForm(request.POST)
            if form.is_valid():
                registration = form.save(commit=False)
                registration.event = event

                if request.user.is_authenticated:
                    registration.user = request.user

                registration.save()

                # üîπ –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ—Ä–º–æ–π SimplePay
                return redirect('yookassa_payment_form', reg_id=registration.id)

            else:
                messages.error(request, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ')
        else:
            form = RegistrationForm()

        context = {
            'form': form,
            'event': event,
            'title': f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ {event.title}'
        }
        return render(request, 'events/register.html', context)

    except Event.DoesNotExist:
        messages.error(request, '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        return redirect('events:list')
    except Exception as e:
        logger.error(f'Error registering for event {pk}: {str(e)}')
        messages.error(request, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
        return redirect('events:detail', pk=pk)


@require_http_methods(['GET'])
def payment_result(request):
    """Handle payment result"""
    try:
        payment_id = request.GET.get('payment_id')

        if not payment_id:
            messages.error(request, '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–µ–∂–∞')
            return redirect('events:list')

        payment_data = YooKassaService.get_payment(payment_id)

        if not payment_data:
            messages.error(request, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞')
            return redirect('events:list')

        try:
            registration = Registration.objects.get(payment_id=payment_id)

            if payment_data['status'] == 'succeeded':
                registration.payment_status = 'completed'
                registration.save()
                messages.success(request, '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.')
            elif payment_data['status'] == 'canceled':
                registration.payment_status = 'failed'
                registration.save()
                messages.warning(request, '–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω')
            else:
                registration.payment_status = 'pending'
                registration.save()
                messages.info(request, '–ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ')

            return redirect('events:detail', pk=registration.event.pk)

        except Registration.DoesNotExist:
            logger.error(f'Registration not found for payment {payment_id}')
            messages.error(request, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
            return redirect('events:list')

    except Exception as e:
        logger.error(f'Error processing payment result: {str(e)}')
        messages.error(request, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞')
        return redirect('events:list')


def olympiads_list(request):
    """Display list of olympiads"""
    try:
        events = Event.objects.filter(
            event_type='olympiad',
            is_active=True
        ).order_by('-start_date')
        context = {'events': events, 'title': '–û–ª–∏–º–ø–∏–∞–¥—ã'}
        return render(request, 'events/olympiads_list.html', context)
    except Exception as e:
        logger.error(f'Error loading olympiads: {str(e)}')
        messages.error(request, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ª–∏–º–ø–∏–∞–¥')
        return render(request, 'events/olympiads_list.html', {'events': []})


def contests_list(request):
    """Display list of contests"""
    try:
        events = Event.objects.filter(
            event_type='contest',
            is_active=True
        ).order_by('-start_date')
        context = {'events': events, 'title': '–ö–æ–Ω–∫—É—Ä—Å—ã'}
        return render(request, 'events/contests_list.html', context)
    except Exception as e:
        logger.error(f'Error loading contests: {str(e)}')
        messages.error(request, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω–∫—É—Ä—Å–æ–≤')
        return render(request, 'events/contests_list.html', {'events': []})


def conferences_list(request):
    """Display list of conferences"""
    try:
        events = Event.objects.filter(
            event_type='conference',
            is_active=True
        ).order_by('-start_date')
        context = {'events': events, 'title': '–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏'}
        return render(request, 'events/conferences_list.html', context)
    except Exception as e:
        logger.error(f'Error loading conferences: {str(e)}')
        messages.error(request, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π')
        return render(request, 'events/conferences_list.html', {'events': []})
